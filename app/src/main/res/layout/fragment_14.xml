<?xml version="1.0" encoding="utf-8"?>
<androidx.core.widget.NestedScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@color/szary"
    tools:context=".Fragment14"
    tools:ignore="HardcodedText"
    android:id="@+id/scroll13">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical">
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:textAlignment="center"
            android:textColor="@color/niebieski"
            android:textSize="40sp"
            android:text="LABORATORIUM 6 - PRZEWODNIK"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:textAlignment="center"
            android:textColor="@color/czerwony"
            android:textSize="20sp"
            android:layout_marginVertical="50dp"
            android:text="Aby poprawnie wykonać ćwiczenie, należy bazować na poprzednio zaprojektowanych aplikacjach, które stanowiły efekt pracy wcześniejszych zajęć. \n \n Przykładowo – kalkulator BMI, wyświetlanie wpisanego imienia itd."
            />
        <Button
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:clickable="true"
            android:focusable="true"
            android:textColor="@color/android"
            android:textSize="20sp"
            android:layout_gravity="center"
            android:layout_marginTop="40sp"
            android:layout_marginStart="10sp"
            android:padding="16dp"
            android:text="Splash Screen"
            android:id="@+id/F14R1"
            >
        </Button>
        <Button
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:clickable="true"
            android:focusable="true"
            android:textColor="@color/pomarancz"
            android:layout_gravity="center"
            android:textSize="20sp"
            android:layout_marginTop="20sp"
            android:layout_marginStart="10sp"
            android:padding="16dp"
            android:text="Cykl życia aktywności"
            android:id="@+id/F14R2">
        </Button>
        <Button
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:clickable="true"
            android:focusable="true"
            android:textColor="@color/niebieski"
            android:layout_gravity="center"
            android:textSize="20sp"
            android:layout_marginVertical="20sp"
            android:layout_marginStart="10sp"
            android:padding="16dp"
            android:text="Przydatne linki"
            android:id="@+id/F14R3">
        </Button>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F14R1T"
            android:textSize="30sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Splash Screen"
            android:textAlignment="center"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/niebieski"
            android:id="@+id/F14R1T1"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Pierwszym krokiem będzie przygotowanie logo będącego centrum Splash Screen, w tym celu należy:"
            android:textAlignment="center"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/android"
            android:id="@+id/F14R1T2"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="\u2023 Wybrać logo. Koniecznym jest, aby było ono w formie grafiki wektorowej(Vector Asset). \n \n Instrukcja dodawania grafikii wektorowej znajduje się w rozdziale Stylowanie UI. \n \n Należy w oknie tworzenia grafikii wybrać Local file(SVG,PSD), a następnie zaimportować grafikę z dysku. \n \n Po poprawnym imporcie, nazwa nowego pliku będzie taka sama jak pliku oryginalnego. \n \n Utworzy się rónież plik nowy_plik.xml o zadanej nazwie. \n \n \n \u2023 Kolejnym krokiem jest wybranie tła. W tym celu, należy stworzyć New Drawable Resource File w folderze Drawable. \n \n Należy zmienić selector na layer-list. \n \n Następnie, dodamy tło w odpowiednim kolorze przy pomocy komendy:"
            android:textAlignment="center"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/niebieski"
            android:id="@+id/F14R1T3"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="&lt;item android:drawable=\u0022color/white\u0022&gt;&lt;/item&gt;"
            android:textAlignment="center"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/android"
            android:id="@+id/F14R1T4"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="W trakcie realizacji zajęć należy użyć koloru innego, niż dostępne domyślnie. W tym celu należy dodać nowy kolor w pliku colors.xml \n n\ Następnie, do listy należy dodać kolejny item, czyli zaimportowane do folderu drawable logo o nazwie nowy_plik.xml \n \n  Warto również zapewnić, by logo znajdowało się w centrum ekranu za pomocą atrybutu android:gravity \n \n Gotowe logo powinno się prezentować w utworzonym w kroku drugim pliku jak poniżej. "
            android:textAlignment="center"
            />
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG143"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F14R1T5"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Splash screen jako nowy temat"
            android:textAlignment="center"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/niebieski"
            android:id="@+id/F14R1T6"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Krok 1: Dodanie nowego stylu. \n \n W pliku themes.xml do utworzonego domyślnie stylu należy dodać nowy, o innej nazwie (np. SplashScreenTheme), dziedziczący po temacie, który domyślnie jest bez Action Bar (np. Theme.MaterialComponents.NoActionBar). \n \n W nowoutworzonym stylu dodajemy item o nazwie atrybutu android:windowBackground oraz przypisujemy mu nasz plik z logo, który został utworzony w kroku 2 podpunktu pierwszego. \n \n Następnie dodajemy kolejny item o nazwie atrybutu androidStatusBarColor, do którego przypisujemy kolor tożsamy z kolorem tła. \n \n Krok 2: Zmiana tematu w pliku Manifestu. W pliku AndroidManifest.xml należy zmienić linię..."
            android:textAlignment="center"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/android"
            android:id="@+id/F14R1T7"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="android:theme=\u0022@style/Theme.NazwaAplikacji\u0022"
            android:textAlignment="center"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/niebieski"
            android:id="@+id/F14R1T8"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="...zastępując temat przypisany do aplikacji o nazwie NazwaAplikacji (nadanej przy tworzeniu projektu) na utworzony w kroku 1 podpunktu b styl (np. SplashScreenTheme). \n \n Krok 3: Zmiana tematu w MainActivity.kt. \n \n W pliku MainActivity.kt należy w metodzie onCreate, przed setContentView zmienić temat aplikacji na domyślny. \n \n W tym celu stosuje się setTheme(R.style.&lt;NazwaTematu&gt;)."
            android:textAlignment="center"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F14R1T9"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Splash Screen jako dodatkowa aktywność"
            android:textAlignment="center"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/niebieski"
            android:id="@+id/F14R1T10"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Prace należy rozpocząć poprzez dodanie kolejnej pustej aktywności do projektu, która w przypadku niniejszego poradnika będzie nosiła nazwę AwesomeActivity. \n \n Potrzebne są minimum dwie aktywności, aby móc zrealizować Splash Screen. W niniejszej części MainActivity będzie pełnić rolę SplashScreen, a AwesomeActivity – głównej aktywności."
            android:textAlignment="center"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/pomarancz"
            android:id="@+id/F14R1T11"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="\u2023 Krok 1: Ustawienie activity_main.xml – część graficzna Splash Screenu. Plik ten powinien się składać tylko z ConstraintLayout oraz tła, którym jest utworzony w kroku 2 podpunktu a plik .xml \n \n \u2023 Krok 2: Ukrycie ActionBar. W MainActivity.kt należy ukryć Action bar np. za pomocą supportActionBar?.hide(). \n \n Kolejnym etapem jest zmuszenie aktywności MainActivity, by wyświetlała logo przez 2-3 sekundy (tyle mniej więcej powinien wyświetlać się Splash Screen), a następnie przeszła do kolejnej aktywności AwesomeActivity. \n \n W tym celu można wykorzystać np. Handler lub intencję jawną z Timerem, jak w instrukcji do laboratorium. \n \n \u2023 Krok 3: Wywołanie onDestroy() dla MainActivity. W celu uniknięcia możliwości powrotu do aktywności będącej Splash Screenem, należy się upewnić, że ta aktywność zostanie zniszczona przez system. \n \n W tym celu warto zastosować metodę finish()."
            android:textAlignment="center"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F14R2T"
            android:textSize="25sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Cykl życia aktywności"
            android:textAlignment="center"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/niebieski"
            android:id="@+id/F14R2T1"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Aktywności mogą znajdować się w czterech różnych stanach: \n \n \u2023 Jest na pierwszym planie. Istotne jest to, że tylko jedna aktywność może być na pierwszym planie w danym momencie \n \n \u2023 Jest wyświetlana, ale nie jest na pierwszym planie – np. wyświetla się jakieś małe okienko z komunikatem \n \n \u2023 Jest wyłączona i nie ma jej w pamięci operacyjnej \n \n \u2023 Jest wstrzymana, co oznacza, ze nie jest ona zamknięta ani nie jest widoczna. Działa ona w tle. \n \n \n Diagram działania aktywności przedstawiono na rysunku poniżej i jest on zgodny z dokumentacją wewnętrzną Androida."
            android:textAlignment="center"
            />
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG144"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/niebieski"
            android:id="@+id/F14R2T2"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="W cyklu życia wyróżnia się sześć metod, do których zaliczyć należy:"
            android:textAlignment="center"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F14R2T3"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="\u2023 onCreate() jest wywoływana wtedy, kiedy aktywność jest uruchamiana po raz pierwszy. Wykonuje się ona tylko raz. \n \n Z tego powodu to właśnie ją wykorzystuje się najczęściej i to właśnie w niej ustawiamy wygląd ekranu oraz ustawienia początkowe. Jest nadpisywana automatycznie przy tworzeniu nowej pustej aktywności. \n \n \u2023 onStart() jest wywoływana kiedy aktywność staje się widoczna dla użytkownika. Interakcja użytkownika z aktywnością nie jest możliwa na tym etapie \n \n \u2023 onStop() jest wywoływana kiedy aplikacja jest zamykana. Aktywność przestaje być wówczas widoczna dla użytkownika. \n \n Można tutaj wprowadzić kod, który zapisze stan aplikacji np. do bazy danych \n \n \u2023 onPause() jest wywoływana kiedy inna aktywność schodzi w interakcje z użytkownikiem oraz np. kiedy obracamy ekran, a także przed metodą onStop w przypadku zamknięcia aplikacji \n \n \u2023 onResume() jest wywoływana kiedy interakcja użytkownika z aktywnością staje się możliwa. Wykonuje się również, kiedy obracamy ekran lub przy powrocie do działania po wcześniejszym pauzowaniu \n \n \u2023 onDestroy() – metoda jest wywoływana, kiedy aktywność jest niszczona"
            android:textAlignment="center"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/niebieski"
            android:id="@+id/F14R2T4"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Uwzględniając komunikaty Logcat podczas wywoływania każdego z wyżej wymienionych callbacków (które obrazują cykl życia aktywności), można uzyskać efekt jak poniżej"
            android:textAlignment="center"
            />
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG145"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F14R2T5"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Dzięki temu możliwe jest obserwowanie cyklu życia aktywności w momencie jej wyłączenia lub np. obrócenia ekranu o 90 stopni (z orientacji pionowej na poziomą lub odwrotnie)."
            android:textAlignment="center"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/pomarancz"
            android:id="@+id/F14R3T"
            android:textSize="30sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Przydatne linki"
            android:textAlignment="center"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:id="@+id/link_download6"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:autoLink="web"
            android:linksClickable="true"
            android:textColorLink="@color/niebieski"
            android:text="https://stackoverflow.com/questions/7965494/how-to-put-some-delay-in-calling-an-activity-from-another-activity"
            android:textAlignment="center">
        </TextView>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:id="@+id/link_download7"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:autoLink="web"
            android:linksClickable="true"
            android:textColorLink="@color/niebieski"
            android:text="https://stackoverflow.com/questions/43348623/how-to-call-a-function-after-delay-in-kotlin"
            android:textAlignment="center">
        </TextView>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:id="@+id/link_download8"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:autoLink="web"
            android:linksClickable="true"
            android:textColorLink="@color/niebieski"
            android:text="https://developer.android.com/guide/components/activities/activity-lifecycle"
            android:textAlignment="center">
        </TextView>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:id="@+id/link_download9"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:autoLink="web"
            android:linksClickable="true"
            android:textColorLink="@color/niebieski"
            android:text="https://stackoverflow.com/questions/8515936/android-activity-life-cycle-what-are-all-these-methods-for"
            android:textAlignment="center">
        </TextView>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:id="@+id/link_download10"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:autoLink="web"
            android:linksClickable="true"
            android:textColorLink="@color/niebieski"
            android:text="https://developer.android.com/guide/components/activities/intro-activities"
            android:textAlignment="center">
        </TextView>
    </LinearLayout>
</androidx.core.widget.NestedScrollView>

