<?xml version="1.0" encoding="utf-8"?>
<androidx.core.widget.NestedScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@color/szary"
    tools:context=".Fragment19"
    tools:ignore="HardcodedText"
    android:id="@+id/scroll18">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical">
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:textAlignment="center"
            android:textColor="@color/niebieski"
            android:textSize="40sp"
            android:text="Recycler View"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/android"
            android:id="@+id/F19R1T"
            android:textSize="25sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Wstęp"
            android:textAlignment="center"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F19R1T1"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Jest to bardziej złożona wersja ListView. Aktualnie komponent Recycler View jest domyślnie dostępny w Android Studio (we wcześniejszych wersjach należało na początku zaimplementować RecyclerView oraz CardView).\n \n  Po dodaniu RecyclerView activity_main.xml w widoku Design wygląda jak poniżej:"
            android:textAlignment="center"
            />
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG147"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F19R1T2"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Aby cokolwiek zrobić z RecyclerView, należy stworzyć nowy plik Design w folderze layout (PPM na folderze layout, New, Layout Resource File)"
            android:textAlignment="center"
            />
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG148"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG149"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F19R1T3"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Następnie wpisujemy wybraną nazwę pliku (pamiętając o tym, że jest to plik .xml). \n \n Następne to wybór root element. Najczęściej pozostawia się po prostu ConstraintLayout. \n \n Po nadaniu nazwy można kliknąć OK. Po kliknięciu pokaże się nowy plik Design w folderze Layout, jak poniżej."
            android:textAlignment="center"
            />
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG150"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F19R1T4"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Jakikolwiek design chcielibyśmy stworzyć, możemy to zrobić właśnie w tym miejscu. W prezentowanym przykładzie pierwszym krokiem będzie dodanie komponentu CardView do projektowanego obszaru w pliku colors_design.xml wykorzystując komponenty z Palette. \n \n Następnie, celem ułatwienia ustawienia położenia poszczególnych komponentów na karcie, najlepiej jest umieścić kolejny (podrzędny) ConstraintLayout."
            android:textAlignment="center"
            />
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG151"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F19R1T5"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Teraz najlepiej ograniczyć wymiary ostatniego Layoutu, np. do wysokości 80 dp, a wymiary CardView ograniczyć do wrap_content"
            android:textAlignment="center"
            />
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG152"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F19R1T6"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Następnie, należy zmienić wymiary nadrzędnego layoutu (który jest komponentem root – łączącym) również do wrap_content."
            android:textAlignment="center"
            />
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG153"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F19R1T7"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="W tym momencie jest gotowy szablon, na którym można pracować umieszczając ImageView, TextView i inne komponenty. \n \n Jeśli chcemy, by rysunki umieszczone w ramach RecyclerView były okrągłe, można znaleźć odpowiednią bibliotekę albo na stronie Android Studio Developer, albo wyszukując odpowiednią na GitHub"
            android:textAlignment="center"
            />
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG154"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG155"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F19R1T8"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="W Gradle Scripts, build.gradle(:app) dodajemy odpowiednią bibliotekę:"
            android:textAlignment="center"
            />
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG156"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F19R1T9"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Po dodaniu biblioteki pojawi się monit o synchronizację w górnej części ekranu (podobnie jak przy dodaniu viewBinding). \n \n Również w tym przypadku należy kliknąć Sync Now. Po kliknięciu należy powrócić do pliku color_design.xml. \n \n Aby korzystać z okrągłych ImageView, łatwiej jest napisać odpowiedni kod w xml zamiast wybierać gotowe komponenty z palety. \n \n W tym celu, należy dodać wspomniany komponent w podrzędnym ConstraintLayout w widoku Code albo Split."
            android:textAlignment="center"
            />
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG157"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG158"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F19R1T10"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Można również po prostu skopiować odpowiednie atrybuty z GitHub, a następnie je zmodyfikować wedle uznania. \n \n \n Należy pamiętać również o dodaniu plików graficznych, które mają być zaprezentowane jako ikonki. W tym przykładzie są to pliki pink.jpg, blue.jpg i green.jpg, które zostały umieszczone w folderze drawable (PPM na folder drawable, Open in, Explorer pozwala na otworzenie miejsca, gdzie zapisane są pliki projektu \n \n Następnie należy dwukrotnie kliknąć na folder drawable i przekopiować do tego folderu wybrane pliki)"
            android:textAlignment="center"
            />
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG159"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG160"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F19R1T11"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Po dodaniu TextView x2, ustawieniu ograniczeń (constraints), oraz podmianie rysunku na @drawable/blue Design wygląda jak powyżej. \n \n \n Warto w tym miejscu również nadać odpowiednie nazwy (id) dla każdego z komponentów, by w późniejszych etapach łatwiej na nich pracować. \n \n Ze względu na zastosowanie CardView, można zmieniać wygląd „obramowania” karty, np. poprzez nadanie promienia przy wierzchołkach prostokąta będącego zewnętrznym obramowaniem (Common Attributes)"
            android:textAlignment="center"
            />
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG161"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG162"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F19R1T12"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Warto również zostawić przestrzeń pomiędzy kartami za pomocą margin oraz ustawić kolor karty. Ostatecznie osiągnięto efekt w przykładzie jak powyżej \n \n \n W ten sposób za pomocą CardView ustawiliśmy sobie szablon, jak powinna wyglądać karta w RecyclerView. \n \n Wracając do pliku activity_main.xml, można za pomocą listitem wybrać utworzoną kartę, która będzie stanowić bazę RecyclerView. \n \n Po wybraniu utworzonego colors_design.xml, RecyclerView wygląda jak poniżej:"
            android:textAlignment="center"
            />
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG163"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG164"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG165"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F19R1T13"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Otrzymując taki efekt, część związana z projektowaniem można uznać za zakończoną. \n \n \n  W tym momencie należy rozpocząć działania w MainActivity.kt. Standardowo, na początku należy włączyć viewBinding w build.gradle(:app) oraz zmodyfikować utworzony plik MainActivity. \n \n Następnie, ze względu na zawartość trzech komponentów w RecyclerView, utworzymy trzy ArrayList, po jednej dla każdego komponentu (typu String dla textView oraz typu Int dla obrazów) \n \n \n Kolejno, należy ustawić widok recyclerView za pomocą jednej z trzech opcji podanych poniżej."
            android:textAlignment="center"
            />
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG178"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG179"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG180"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG181"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F19R1T14"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="W niniejszym przykładzie wykorzystano LinearLayout, bez możliwości ustawiania liczby kolumn. \n \n Następnie uzupełniono ArrayLists, jak powyżej \n \n \n Mając już dane wejściowe, można przejść do utworzenia klasy Adapter, która powiąże dane wejściowe z RecyclerView. \n \n W tym celu należy PPM kliknąć na package, New Kotlin File/Class, Class. Kolejno, kopiujemy zmienne MainActivity.kt, które będą zawierać nasze dane. \n \n Następnie tworzymy konstruktor (PPM, Generate, Secondary Constructor, zaznaczamy wszystkie zmienne i klikamy OK)"
            android:textAlignment="center"
            />
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG166"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F19R1T15"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Kolejno można przekonwertować konstruktor do podstawowego (PPM – show context actions, convert to primary constructor). Nie jest to obligatoryjne, Secondary Constructor również jest prawidłowy"
            android:textAlignment="center"
            />
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG167"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F19R1T16"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Przy Primary Constructor nie można zastosować słowa kluczowego lateinit, stąd obecny warning. \n \n Kolejno należy utworzyć klasę wewnętrzną (inner class), tzw. holder wraz z konstruktorem. \n \n Sprawdzamy również, jakie id miał każdy z używanych przez nas komponentów i korzystamy z tego przy metodzie itemView()."
            android:textAlignment="center"
            />
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG168"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F19R1T17"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Następnie dostosowujemy adapter do RecyclerView. Po dodaniu zaznaczonego fragmentu przy klasie KoloryAdapter pojawi się monit, aby zaimplementować członków (implement members). Po kliknięciu pojawią się poniżej trzy metody."
            android:textAlignment="center"
            />
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG169"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG170"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F19R1T18"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="\u2023 Metoda onCreateViewHolder() jest potrzebna, by zdefiniować design CardView, która została zrobiona na początku. \n \n Innymi słowy, dzięki niej możemy skorzystać z tego designu, który stworzyliśmy. \n \n \u2023 Metoda on BindViewHolder() z kolei umożliwia podanie, co powinno zostać zrobione kiedy zrobiony przez nas design będzie połączony z RecyclerView (innymi słowy, ona bezpośrednio służy do tego, by wyświetlić RecyclerView). \n \n \u2023 Metoda getItemCount() umożliwia określenie ilości danych, które będziemy wyświetlać w RecyclerView."
            android:textAlignment="center"
            />
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG171"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F19R1T19"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Potrzebne jest jeszcze ustawienie przesłania danych z MainActivity.kt do klasy AdapterKolory.kt. \n \n Aby to zrobić, należy stworzyć obiekt z klasy AdapterKolory w klasie MainActivity..."
            android:textAlignment="center"
            />
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG172"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F19R1T20"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="... a następnie przypisać parametry"
            android:textAlignment="center"
            />
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG173"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F19R1T21"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Po uruchomieniu aplikacji efekt jest jak poniżej."
            android:textAlignment="center"
            />
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG174"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/android"
            android:id="@+id/F19R1T22"
            android:textSize="30sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="I GOTOWE"
            android:textAlignment="center"
            />
    </LinearLayout>
</androidx.core.widget.NestedScrollView>

