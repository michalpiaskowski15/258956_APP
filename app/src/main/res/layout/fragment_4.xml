<?xml version="1.0" encoding="utf-8"?>
<androidx.core.widget.NestedScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@color/szary"
    tools:context=".Fragment4"
    tools:ignore="HardcodedText"
    android:id="@+id/scroll3">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical">
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:textAlignment="center"
            android:textColor="@color/android"
            android:textSize="40sp"
            android:text="Layout"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/android"
            android:textSize="20sp"
            android:layout_marginTop="40sp"
            android:textAlignment="center"
            android:text="Czego dowiesz się w tym rozdziale?">
        </TextView>
        <Button
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:clickable="true"
            android:focusable="true"
            android:textColor="@color/android"
            android:textSize="20sp"
            android:layout_gravity="center"
            android:layout_marginTop="40sp"
            android:layout_marginStart="10sp"
            android:padding="16dp"
            android:text="Wstęp"
            android:id="@+id/F4R1"
            >
        </Button>
        <Button
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:clickable="true"
            android:focusable="true"
            android:textColor="@color/pomarancz"
            android:layout_gravity="center"
            android:textSize="20sp"
            android:layout_marginTop="20sp"
            android:layout_marginStart="10sp"
            android:padding="16dp"
            android:text="Rodzaje layoutów"
            android:id="@+id/F4R2">
        </Button>
        <Button
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:clickable="true"
            android:focusable="true"
            android:textColor="@color/niebieski"
            android:layout_gravity="center"
            android:textSize="20sp"
            android:layout_marginVertical="20sp"
            android:layout_marginStart="10sp"
            android:padding="16dp"
            android:text="Praca z layoutami"
            android:id="@+id/F4R3">
        </Button>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/niebieski"
            android:id="@+id/F4R1T"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Rozdział 1"
            android:textAlignment="center"
            />
        <TextView
            android:id="@+id/F4R1T1"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="30dp"
            android:text=" Layoutami nazywami pliki odpowiedzialne za wygląd aplikacji.\n \n Po przejściu do MainActivity.kt domyślnie znajduje się funkcja setContentView. Jej parametrem jest R.layout.activitu_main, który odnosi się do \n \n  Resources->Layout->activity_main.xml"
            android:textAlignment="center"
            android:textColor="@color/white"
            android:textSize="20sp">
        </TextView>
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG31"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <TextView
            android:id="@+id/F4R1T2"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="30dp"
            android:text="Jeśli klikniemy w odnośnik trzymając wciśnięty CTRL zostaniemy przeniesieni do pliku odpowiedzialnego za wygląd konkretnego widoku naszej aplikacji."
            android:textAlignment="center"
            android:textColor="@color/white"
            android:textSize="20sp">
        </TextView>
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG32"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <TextView
            android:id="@+id/F4R1T3"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="30dp"
            android:text="Na powyższym obrazku możemy zaobserwować składnię plików XML. Jeśli wewnątrz danych klamr mamy inne elementy takie jak np. TextView, to całość musimy zamknąć klamrą z deklaracją początkową. \n \n  Natomiast jesli zamykamy poszczególne elementy jak TextView, wystarczy klamra zamykająca \n \n Przejdź teraz do trybu SPLIT i zamień TextView na Button \n \n Jak możesz zauważyć, w ten sposób z pola tekstowego zamieniliśmy ten element na przycisk. W taki sposób definiujemy elementy w kodzie."
            android:textAlignment="center"
            android:textColor="@color/white"
            android:textSize="20sp">
        </TextView>
        <TextView
            android:id="@+id/F4R1T4"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="30dp"
            android:text="Jeśli nie chcesz definiować elementów w kodzie, możesz przejść do trybu design i umieścić dany element z Palette na ekranie. Automatycznie zostanie on dodany do kodu XML"
            android:textAlignment="center"
            android:textColor="@color/pomarancz"
            android:textSize="20sp">
        </TextView>
        <TextView
            android:id="@+id/F4R1T5"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="30dp"
            android:text="Dla aplikacji mobilnych najbardziej popularnym sposobem tworzenia jest stosowanie języka XML. Kod plików głównych (np. MainActivity.kt) zawiera funkcje, nasłuchiwanie przycisków czy inne operacje, natomiast język XML opisuje wygląd i atrybuty elementów(pół tekstowych, obrazów, przycisków itp.)"
            android:textAlignment="center"
            android:textColor="@color/niebieski"
            android:textSize="20sp">
        </TextView>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/niebieski"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:id="@+id/F4R2T"
            android:text="Rozdział 2 - Rodzaje layoutów"
            android:textAlignment="center"/>
        <TextView
            android:id="@+id/F4R1T6"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="30dp"
            android:text="Layoutem nazywamy interfejs, który wykorzystywany jest do umieszczania komponentów Androida w aplikacji.Definiuje on wizualną strukturę dla interfejsu użytkownika. \n \n  Layouty wypełniają cały ekran aplikacji oraz przygotowują miejsca pod inne komponenty tj. przyciski, teksty, obrazy. \n \n Najczęściej wykorzystywane layouty to Constraint Layout oraz Linear Layout. Relative oraz Grid Layouts obecnie wychodzą z użycia, jednakże nadal można je spotkać w starszych aplikacjach i projektach. \n \n Wyróżniamy layouty takie jak:"
            android:textAlignment="center"
            android:textColor="@color/white"
            android:textSize="20sp">
        </TextView>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/niebieski"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:id="@+id/F4R2T7"
            android:text="LinearLayout"
            android:textAlignment="center"/>
        <TextView
            android:id="@+id/F4R1T8"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="30dp"
            android:text="LinearLayout jest układem, w którym elementy układane są liniowo. Można je układać w poziomie oraz pionie, czyli elememty są układane albo jeden obok drugiego albo jeden pod drugim. \n \n Aby zmienić orientację Layoutu, możemy w kodzie skorzystać z android:orientation=\u0022vertical\u0022 lub android:orientation=\u0022horizontal\u0022. \n \n Dzięki tym deklaracjom możemy decydować, czy Layout jest podzielony na kolumny, czy wiersze. \n \n Fuzją tych możliwości jest TableLayout, który łączy kolumny i wiersze tworząc siatkę, lub GridLayout, który organizuje elementy w formę siatki o określonej liczbie wierszy i kolumn "
            android:textAlignment="center"
            android:textColor="@color/white"
            android:textSize="20sp">
        </TextView>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/niebieski"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:id="@+id/F4R2T9"
            android:text="ConstraintLayout"
            android:textAlignment="center"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:id="@+id/F4R2T10"
            android:text="Constraint Layout jest tzw. layoutem elastycznym, dopasowującym się. Wykorzystuje węzły, dzięki którym możemy \u0022zakotwiczyć\u0022 dany element o dowolną krawędź ekranu, czy do innego elementu."
            android:textAlignment="center"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/niebieski"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:id="@+id/F4R2T11"
            android:text="RelativeLayout"
            android:textAlignment="center"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:id="@+id/F4R2T12"
            android:text="RelativeLayout to układ, który pozwala na uzależnienie pozycji danego elementu względem innych elementów, lub do rodzica."
            android:textAlignment="center"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/niebieski"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:id="@+id/F4R2T13"
            android:text="FrameLayout"
            android:textAlignment="center"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:id="@+id/F4R2T14"
            android:text="FrameLayout pozwala na umieszczanie elementów na sobie w formie warstw. Przydaje się, gdy chcemy dodawać kolejne elementy na wierzchu poprzednich."
            android:textAlignment="center"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/niebieski"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="20dp"
            android:id="@+id/F4R3T"
            android:text="Rozdział 3 - Praca z Layoutami"
            android:textAlignment="center"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:id="@+id/F4R3T1"
            android:textSize="20sp"
            android:textColor="@color/white"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="30dp"
            android:text="W celu rozpoczęcia pracy nad layoutem należy przejść do intersującego nas pliku XML w zakładce res/layout. Domyślnie jest to activity_main.xml"
            android:textAlignment="center">
        </TextView>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:id="@+id/F4R3T2"
            android:textSize="20sp"
            android:textColor="@color/niebieski"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="30dp"
            android:text="Elementy UI pomocne w projektowaniu - zakładka DESIGN"
            android:textAlignment="center">
        </TextView>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:id="@+id/F4R3T3"
            android:textSize="20sp"
            android:textColor="@color/white"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="30dp"
            android:text="Na zdjęciu poniżej widzimy okno projektowania. Oprócz bocznego panelu Attributes, w którym możemy dostosowywać dodane elementy, palety elementów Drag&amp;Drop, oraz Component Tree, nad podglądem możemy zauważyć menu opcji. Kolejno znajdują się w nim:"
            android:textAlignment="center">
        </TextView>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:id="@+id/F4R3T4"
            android:textSize="20sp"
            android:textColor="@color/niebieski"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="30dp"
            android:text="\u2023 View options \n \u2023 Enable Autoconnection to Parent \n  \u2023 Default Margins \n \u2023 Clear All Constraints \n \u2023 Infer constraints \n \u2023 Guidelines \n \u2023 Select Design Surface \n \u2023 Orientation for Preview \n \u2023 Changes to Night Mode \n \u2023 Device for Preview "
            android:textAlignment="center">
        </TextView>
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG33"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:id="@+id/F4R3T5"
            android:textSize="20sp"
            android:textColor="@color/niebieski"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="30dp"
            android:text="Linear Layout"
            android:textAlignment="center">
        </TextView>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:id="@+id/F4R3T6"
            android:textSize="20sp"
            android:textColor="@color/white"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="30dp"
            android:text="Po stworzeniu projektu, przed zmianą layoutu najłatwiej usunąć wszystkie komponenty (tutaj jest to textView). Można to zrobić korzystając z przycisku delete na klawiaturze. \n \n Sprawi to, że TextView wyświetlające HelloWorld zniknie i nie będzie zaśmiecało kodu."
            android:textAlignment="center">
        </TextView>
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG34"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:id="@+id/F4R3T7"
            android:textSize="20sp"
            android:textColor="@color/white"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="30dp"
            android:text="Teraz możemy przejść do zakładci CODE/SPLIT. \n \n Aby zmienić layout domyślny na jakikolwiek z interesujących nas Layoutów, wystarczy usunąć deklarację modułu(podkreślone czerwoną linią), oraz zacząć wpisywać intersujący nas Layout(w tym przypadku LinearLayout). Wyświetli nam się lista, z której wybieramy intersujący nas moduł, a środowisko Android Studio podmieni odpowiednie deklaracje. \n \n Po wybraniu Layoutu, możemy zauważyć że zarówno dekalracje w kodzie, jak i oknie DESIGN/Component Tree zostały zmienione."
            android:textAlignment="center">
        </TextView>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:id="@+id/F4R3T8"
            android:textSize="20sp"
            android:textColor="@color/android"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="30dp"
            android:text="Jak pokazano na obrazku, również tutaj ustawiamy atrybuty, takie jak orientacja, o której mówiliśmy w Rodzajach Layoutów."
            android:textAlignment="center">
        </TextView>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:id="@+id/F4R3T9"
            android:textSize="20sp"
            android:textColor="@color/white"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="30dp"
            android:text="Więcej o atrybutach, które możemy ustawiać w plikach XML znajdziesz w zakładce XML"
            android:textAlignment="center">
        </TextView>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:id="@+id/F4R3T10"
            android:textSize="20sp"
            android:textColor="@color/white"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="30dp"
            android:text="Tak jak wspominaliśmy wcześniej, w oknie DESIGN możesz dodawać komponenty do widoku metodą Drag&amp;Drop. \n \n  Spróbuj dodać do okna Button lub TextView. \n \n Na poniższych obrazach pokażemy Ci, jak dodawanie kolejnych elementów będzie wyglądało w LinearLayout dla orientacji vertical, oraz horizontal."
            android:textAlignment="center">
        </TextView>
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG35"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG36"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:id="@+id/F4R3T11"
            android:textSize="20sp"
            android:textColor="@color/white"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="30dp"
            android:text="Parametry dodanych elementów, takie jak ich wysokość, szerokość, kolory, marginesy itp. możemy edytować w prawym bocznym panelu Attributes, lub ręcznie w kodzie XML(Rozdział 4)."
            android:textAlignment="center">
        </TextView>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:id="@+id/F4R3T12"
            android:textSize="20sp"
            android:textColor="@color/pomarancz"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="30dp"
            android:text="Możemy stosować różne układy w ramach jednej aktywności. Na przykład, można dodać układ poziomy do istniejącego głównego układu pionowego lub zastosować inne kombinacje. Wystarczy wybrać układ z palety elementów, przeciągnąć go i upuścić w odpowiednim miejscu w hierarchii komponentów w oknie Component Tree."
            android:textAlignment="center">
        </TextView>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:id="@+id/F4R3T13"
            android:textSize="20sp"
            android:textColor="@color/white"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="30dp"
            android:text="Teraz mamy możliwość łatwego zarządzania komponentami w wybranych układach poprzez klikanie i przeciąganie. Na przykład, możemy przypisać elementy takie jak obraz czy tekst do układu pionowego, a przyciski do układu poziomego. Te komponenty są teraz również odzwierciedlone w pliku XML."
            android:textAlignment="center">
        </TextView>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:id="@+id/F4R3T14"
            android:textSize="20sp"
            android:textColor="@color/android"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="30dp"
            android:text="Pamiętajmy, że możemy również w polu Attributes dostosowywać szerokośći wysokość layoutów, a nie tylko elementów takich jak Button czy ImageView."
            android:textAlignment="center">
        </TextView>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/niebieski"
            android:id="@+id/F4R3T15"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Relative Lavout"
            android:textAlignment="center"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F4R3T16"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Przypomnijmy - w tym układzie dodane elementy są umieszczane względem ich wzajemnej pozycji. \n \n Aby stworzyć RelativeLayout należy postępować analogicznie jak w przypadku LinearLayout. \n \n RelativeLayout został zastąpiony przez Constraint Layout, dlatego nie znajdziemy go w trybie design, oraz Palette/Layouts. Można go jednak wyszukać w zakładce Legacy(podobnie jak GridLayout. "
            android:textAlignment="center"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/pomarancz"
            android:id="@+id/F4R3T17"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Więc jak działają te wzajemne pozycje?"
            android:textAlignment="center"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F4R3T18"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Zacznijmy od zobrazowania co stanie się, jeśli dodamy dwa elementy do RelativeLayout:"
            android:textAlignment="center"
            />
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG37"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F4R3T19"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Jak widzimy, wszystkie dodane elementy nakładają się na siebie. Aby tego uniknąć, należy dokonać kilku modyfikacji w pliku XML:"
            android:textAlignment="center"
            />
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG38"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F4R3T20"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Na powyższym obrazie dodano kilka zależności do pliku XML."
            android:textAlignment="center"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/android"
            android:id="@+id/F4R3T21"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="centerHorizontal - umieszcza element w centrum osi X rodzica \n \n centerVertical - umieszcza element w centrum osi Y rodzica \n \n  centerInParent - jest połączeniem dwóch powyższych, tzn ustawia element w centrum osi X i Y rodzica"
            android:textAlignment="center"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F4R3T24"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Skorzystaliśmy również z android:layout_below=\u0022@+id/imageView\u0022 co oznacza że Button będzie umieszczony pod imageView o wpisanym id \n \n Możemy również zastąpić polecenie \u0022 below \u0022 poleceniem \u0022 above \u0022, co ustali pozycję nad wskazanym elementem"
            android:textAlignment="center"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/niebieski"
            android:id="@+id/F4R3T25"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="TableLayout"
            android:textAlignment="center"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F4R3T26"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="TableLayout służy do tworzenia swoistych siatek, w których elementy zajmują konkretne miejsca w pozycji tabeli. \n \n Wyróżniamy podział na wiersze i kolumny. \n \n Aby stworzyć TableLayout musimy tak jak zwykle zamienić w kodzie deklaracje Layoutu rodzica. Następnie, możemy przejść do trybu DESIGN. \n \n Najłatwiejszą metodą na tworzenie tabel w TableLayout jest dodanie kolejnych wierszy do Layoutu. \n \n Przejdź do zakładki Layouts, oraz przeciągnij do Twojego widoku kilka \u0022 TableRow \u0022 \n \n Następnie, do każdego TableRow w Component Tree dodaj kilka Buttons. Efekt powinien być jak poniżej:"
            android:textAlignment="center"
            />
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG39"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/niebieski"
            android:id="@+id/F4R3T27"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="W taki sam sposób możemy dodawać dowolne elementy do układu tabeli. \n \n TableLayout ten może być pomocny np. do tworzenia klawiatury kalkulatora. \n \n Zwykle jest stosowany jako Layout podrzędny."
            android:textAlignment="center"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F4R3T28"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Jak wygląda kod XML po dodaniu wierszy, oraz przycisków? \n \n Przybiera on czytelną formę dzięki wcięciom, co pozwala nam na intuicyjne odczytywanie kodu:"
            android:textAlignment="center"
            />
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG40"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/niebieski"
            android:id="@+id/F4R3T29"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Constraint Layout"
            android:textAlignment="center"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F4R3T30"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Jest to jeden z najbardziej edytowalnych i elastycznych Layoutów. Umożliwia tworzenie złożonych i responsywnych widoków. \n \n W celu rozpoczęcia pracy należy - standardowo - ustawić interesujący nas Layout w deklaracji w pliku XML."
            android:textAlignment="center"
            />
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG41"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F4R3T31"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Przeciągnijmy teraz dowolne elementy do naszego widoku. \n \n Jak możemy zauważyć, dodane elementy nie są umieszczane np. w pozycji 0.0, lecz zostają w miejscu w którym je upuścimy. Dzieje się tak, ponieważ nie dodaliśmy Constraints, więc elementy mają pełną swobodę. \n \n Pomimo ostrzeżeń, możemy uruchomić projekt, jednak wszystkie elementy zostaną umieszczone w punkcie (0,0) "
            android:textAlignment="center"
            />
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG42"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F4R3T32"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Usuńmy elementy zostawiając jedynie ImageView. \n \n Aby nadać mu tzw. Constraints, czyli swoiste kotwice, musimy kliknąć na dany element, a następnie przeciągnąć każdy z jego punktów do krawędzi bocznych, jak na obrazie poniżej:"
            android:textAlignment="center"
            />
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG43"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F4R3T33"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Jak możemy zauważyć, po zakotwiczeniu każdej ze stron ImageView jest w idealnym centrum."
            android:textAlignment="center"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/android"
            android:id="@+id/F4R3T34"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Możemy również użyć Infer Constraints, dzięki któremu layout automatycznie zakotwiczy nam element, lub kilka elementów."
            android:textAlignment="center"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F4R3T35"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Możemy również operować na Constraints w menu Attributes, lub klikając prawym przyciskiem myszy na dany element:"
            android:textAlignment="center"
            />
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG44"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG45"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/pomarancz"
            android:id="@+id/F4R3T36"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="A co jeśli elementów jest więcej?"
            android:textAlignment="center"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F4R3T37"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Usuńmy teraz górny Constraint, klikając na niego, a następnie używając klawisza DELETE. \n \n Dodajmy kolejne ImageView nad nim. \n \n Teraz połączmy elementy między sobą, oraz dodajmy górny Constraint dodanego elementu. \n \n Stworzyliśmy w ten sposób układ dwóch imageView, które są od siebie zależne, tzn jeśli jeden zmieni pozycję, to drugi również."
            android:textAlignment="center"
            />
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG46"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="@color/white"
            android:id="@+id/F4R3T38"
            android:textSize="20sp"
            android:layout_marginHorizontal="10dp"
            android:layout_marginVertical="10dp"
            android:text="Kod XML naszego układu prezentuje się następująco:"
            android:textAlignment="center"
            />
        <com.github.chrisbanes.photoview.PhotoView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:backgroundTint="@color/szary_pom"
            android:id="@+id/IMG47"
            android:layout_marginVertical="20dp"
            android:src="@drawable/baseline_android_24"
            android:scaleType="fitCenter"/>
    </LinearLayout>



</androidx.core.widget.NestedScrollView>